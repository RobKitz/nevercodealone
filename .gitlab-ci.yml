
  #--------------------------------------------------------------------------------------------------
  # STAGES
  #--------------------------------------------------------------------------------------------------
  # build:        build docker image
  # deploy:       deploy application to environment
  # test:         run tests on deployed environment
  # final:        remove environment / deploy to production

  stages:
    - build
    - deploy
    - test
    - final

  variables:
    HTTP_URL: $CI_COMMIT_REF_SLUG.develop.nevercodealone.de
    RANCHER_PROJECT_NAME: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    TOOLBOX_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH/toolbox:$CI_COMMIT_REF_SLUG
    WEB_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG
    WEBDRIVER_URL: rancher.nevercodealone.de
    WEBSITE_URL: https://$CI_COMMIT_REF_SLUG.develop.nevercodealone.de


  #--------------------------------------------------------------------------------------------------
  # JOBS
  #--------------------------------------------------------------------------------------------------

  # Stage: build

  build_development_image:
    stage: build
    image: docker:stable
    before_script:
      - docker login --username gitlab-ci-token --password $CI_BUILD_TOKEN $CI_REGISTRY 2>/dev/null
    script:
      - docker build -t $WEB_IMAGE --target webserver --pull .
      - docker push $WEB_IMAGE
    tags:
      - docker-executor
    except:
      - master
      - stage

  build_production_image:
    stage: build
    image: docker:stable
    before_script:
      - docker login --username gitlab-ci-token --password $CI_BUILD_TOKEN $CI_REGISTRY 2>/dev/null
    script:
      - docker build -t $WEB_IMAGE --target webserver --pull --build-arg APP_ENV=prod .
      - docker push $WEB_IMAGE
    tags:
      - docker-executor
    only:
      - master
      - stage
    
  build_toolbox_image:
    stage: build
    image: docker:stable
    before_script:
      - docker login --username gitlab-ci-token --password $CI_BUILD_TOKEN $CI_REGISTRY 2>/dev/null
    script:
      - docker build -t $TOOLBOX_IMAGE --target toolbox --pull .
      - docker push $TOOLBOX_IMAGE
    tags:
      - docker-executor
    except:
      - master

  # Stage: deploy

  deploy_development_image:
    stage: deploy
    image: $TOOLBOX_IMAGE
    before_script:
      - rancher rm --type stack --stop $RANCHER_PROJECT_NAME || true
    script:
      - rancher-compose -p $RANCHER_PROJECT_NAME -f docker-compose.yml -f docker-compose.dev.yml -e .env.dist up -d --pull --upgrade
    tags:
      - docker-executor
    except:
      - master
      - stage

  deploy_production_image:
    stage: deploy
    image: $TOOLBOX_IMAGE
    before_script:
      - "echo \"TODO: clone production environment for upgrade test\""
    script:
      - rancher-compose -p $RANCHER_PROJECT_NAME up -d --pull --upgrade
    tags:
      - docker-executor
    only:
      - master
      - stage

  # Stage: test

  run_tests:
    stage: test
    image: $TOOLBOX_IMAGE
    variables:
      DB_USER: nca
      DB_NAME: nca
      DB_PASS: nca
    before_script:
      - export CONTAINERID=$(rancher ps | grep $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG/db | awk '{ print $1 }')
      - export DB_PORT=$(rancher inspect $CONTAINERID | jq -r .publicEndpoints[0].port)
      - export DATABASE_URL=mysql://nca:nca@$HTTP_URL:$DB_PORT/nca
      - "echo \"DATABASE_URL=${DATABASE_URL}\""
      - export DB_HOST=$HTTP_URL:$DB_PORT
      - "echo \"DB_HOST=${DB_HOST}\""
    script:
      - /var/www/html/bin/console doctrine:schema:validate || /var/www/html/bin/console doctrine:schema:create
      - /var/www/html/vendor/bin/codecept run acceptance --html
    artifacts:
      paths:
        - ./tests/_output/report.html
      expire_in: 1 week
    tags:
      - docker-executor
    except:
      - master

  # Stage: final

  release_image:
    stage: final
    image: docker:stable
    variables:
      GIT_STRATEGY: none
    script:
      - docker pull $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG
      - docker tag $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG $CI_REGISTRY/$CI_PROJECT_PATH:stable
      - docker push $CI_REGISTRY/$CI_PROJECT_PATH:stable
    tags:
      - docker-executor
    only:
      - master
    when: manual

  teardown_environment:
    stage: final
    image: $TOOLBOX_IMAGE
    variables:
      GIT_STRATEGY: none
    script:
      - rancher rm --type stack --stop $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    tags:
      - docker-executor
    except:
      - master
      - stage
    when: manual

