
#--------------------------------------------------------------------------------------------------
# STAGES
#--------------------------------------------------------------------------------------------------
# pre_build:    prepare data for docker image
# build:        build docker image
# deploy:       deploy application to environment
# test:         run tests on deployed environment
# final:        remove environment / deploy to production

stages:
  - pre_build
  - build
  - deploy
  - test
  - release
  - final

#--------------------------------------------------------------------------------------------------
# TEMPLATES
#--------------------------------------------------------------------------------------------------

.composer_install: &composer_install
  stage: pre_build
  image: composer
  variables:
    APP_ENV: dev
    COMPOSER_ARGS: ''
  script:
    - composer install $COMPOSER_ARGS
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .env
      - public/bundles
      - var
      - vendor
    policy: push
  tags:
    - docker-executor

.build_image: &build_image
  stage: build
  image: docker:stable
  variables:
    COMPONENT: '<webserver|toolbox>'
  before_script:
    - docker login --username gitlab-ci-token --password $CI_BUILD_TOKEN $CI_REGISTRY 2>/dev/null
  script:
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH/$COMPONENT:$CI_COMMIT_REF_SLUG --pull -f Dockerfile.$COMPONENT .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/$COMPONENT:$CI_COMMIT_REF_SLUG
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .env
      - public/bundles
      - var
      - vendor
    policy: pull
  tags:
    - docker-executor

.deploy_environment: &deploy_environment
  stage: deploy
  image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/docker-rancher-cli
  variables:
    APP_ENV: dev
    APP_SECRET: secret
    CORS_ALLOW_ORIGIN: ^https?://localhost:?[0-9]*$
    DB_NAME: nca
    DB_PASS: nca
    DB_ROOT_PASS: nca
    DB_USER: nca
    HTTP_DOMAIN: "develop.nevercodealone.de"
    HTTP_URL: "$CI_COMMIT_REF_SLUG.$HTTP_DOMAIN"
    RANCHER_COMPOSE_FILES: -f docker-compose.yml -f docker-compose.toolbox.yml
    RANCHER_PROJECT_NAME: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    TOOLBOX_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/toolbox:$CI_COMMIT_REF_SLUG"
    WEBSERVER_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/webserver:$CI_COMMIT_REF_SLUG"
  script:
    - rancher-compose -p $RANCHER_PROJECT_NAME $RANCHER_COMPOSE_FILES up -d --pull --upgrade
  tags:
    - docker-executor

#--------------------------------------------------------------------------------------------------
# JOBS
#--------------------------------------------------------------------------------------------------

# Stage: pre_build

composer_install_for_dev:
  <<: *composer_install
  except:
    - master
    - staging
    - prepare-prod

composer_install_for_prod:
  <<: *composer_install
  variables:
    APP_ENV: prod
    COMPOSER_ARGS: --optimize-autoloader --no-dev
  only:
    - staging
    - prepare-prod

# Stage: build

build_webserver_image:
  <<: *build_image
  variables:
    COMPONENT: webserver

build_toolbox_image:
  <<: *build_image
  variables:
    COMPONENT: toolbox

# Stage: deploy

deploy_to_dev:
  <<: *deploy_environment
  before_script:
    - rancher rm --type stack --stop $RANCHER_PROJECT_NAME || true
  except:
    - master
    - staging
    - prepare-prod

deploy_to_stage:
  <<: *deploy_environment
  variables:
    APP_ENV: prod
    HTTP_DOMAIN: "nevercodealone.de"
    HTTP_URL: "stage.$HTTP_DOMAIN"
  only:
    - staging
    - prepare-prod

deploy_to_prod:
  <<: *deploy_environment
  variables:
    APP_ENV: prod
    APP_SECRET: $PROD_APP_SECRET
    CORS_ALLOW_ORIGIN: 'TODO'
    DB_NAME: $PROD_DB_NAME
    DB_PASS: $PROD_DB_PASS
    DB_ROOT_PASS: $PROD_DB_ROOT_PASS
    DB_USER: $PROD_DB_USER
    HTTP_DOMAIN: "nevercodealone.de"
    HTTP_URL: "www.$HTTP_DOMAIN"
    RANCHER_COMPOSE_FILES: ''
    TOOLBOX_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/toolbox"
    WEBSERVER_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/webserver"
  only:
    - master

# Stage: test

run_tests:
  stage: test
  image: registry.nevercodealone.de/nevercodealone/docker-toolbox
  variables:
    GIT_STRATEGY: none
  before_script:
    - export CONTAINERID=$(rancher ps | grep $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG/toolbox | awk '{ print $1 }')
    - export SSH_PORT_TOOLBOX=$(rancher inspect $CONTAINERID | jq -r .publicEndpoints[0].port)
    - "echo \"TOOLBOX SSH PORT: ${SSH_PORT_TOOLBOX}\""
  script:
    - ssh rancher.nevercodealone.de -p $SSH_PORT_TOOLBOX "cd ~/symfony && ./bin/console doctrine:schema:create"
    - ssh rancher.nevercodealone.de -p $SSH_PORT_TOOLBOX "cd ~/symfony && ./vendor/bin/codecept run acceptance --html"
  after_script:
    - ssh rancher.nevercodealone.de -p $SSH_PORT_TOOLBOX "if [ -L ~/symfony/public/report ] ; then unlink ~/symfony/public/report ; fi"
    - ssh rancher.nevercodealone.de -p $SSH_PORT_TOOLBOX "ln -s ~/symfony/tests/_output/ ~/symfony/public/report"
  tags:
    - docker-executor
  except:
    - master
    - stage
    - prepare-prod

# Stage: final

release_to_prod:
  stage: final
  image: docker:stable
  variables:
    GIT_STRATEGY: none
  script:
    - docker pull $CI_REGISTRY/$CI_PROJECT_PATH/toolbox:$CI_COMMIT_REF_SLUG
    - docker tag $CI_REGISTRY/$CI_PROJECT_PATH/toolbox
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/toolbox
    - docker pull $CI_REGISTRY/$CI_PROJECT_PATH/webserver:$CI_COMMIT_REF_SLUG
    - docker tag docker pull $CI_REGISTRY/$CI_PROJECT_PATH/webserver
    - docker push docker pull $CI_REGISTRY/$CI_PROJECT_PATH/webserver
  tags:
    - docker-executor
  only:
    - stage
  when: manual

teardown_environment:
  stage: final
  image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/docker-rancher-cli:v0.6.9
  variables:
    GIT_STRATEGY: none
  script:
    - rancher rm --type stack --stop $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
  tags:
    - docker-executor
  except:
    - master
    - stage
  when: manual

